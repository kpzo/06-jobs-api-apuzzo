// taken out of './controllers/auth' and turned into middleware in './models/User'
    // get user info from body of input from user
    const { name, email, password } = req.body

    // generate random bytes for salt (salt = random string to be hashed with password) more = more secure, but requires more power
    const salt = await bcrypt.genSalt(10)

    // hash looks for pw & salt, then hashes it (key derivation function)
    const hashedPassword = await bcrypt.hash(password, salt)
    const tempUser = { 
        name, 
        email, 
        password: hashedPassword
    }

    // mongoose validator will check for required fields (only sometimes in controller)
    if(!name || !email || !password){
        throw new BadRequestError('Please provide name, email and password.')
    }
    // save user info to db
    const user = await User.create({...tempUser })


    
    if (inputEnabled && e.target.nodeName === "BUTTON") {
      if (e.target === addEquipmentButton) {
        enableInput(true);

        let method = "POST";
        let url = "/api/v1/equipment";
        try {
          const response = await fetch(url, {
            method: method,
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({
              brand: brand.value,
              mount: mount.value,
              focalLength: focalLength.value,
              aperture: aperture.value,
              version: version.value,
              serialNumber: serialNumber.value,
              updatedBy: updatedBy.value,
              status: status.value,
            }),
          });

          const data = await response.json();
          if (response.status === 201) {
            message.textContent = "The equipment entry was created.";
            brand.value = "";
            mount.value = "";
            focalLength.value = "";
            aperture.value = "";
            version.value = "";
            serialNumber.value = "";
            updatedBy.value = "";
            status.value = "available";

            showEquipment();
          } else {
            message.textContent = data.msg;
          }
        } catch (err) {
          console.error(err);
          message.textContent = "A communication error occurred.";
        }
        enableInput(true);
      } else if (e.target === editCancel) {
        message.textContent = "";
        showEquipment();
      } else if (e.target === submitAddButton) {
        e.preventDefault();
        await addEquipment();
      }
    }
  })